//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "main.h"
#include "jpeg.hpp"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
        : TForm(Owner)
{
        graylevel= new Graphics::TBitmap();
}
__fastcall TForm1::~TForm1()
{
        delete graylevel;
}
//---------------------------------------------------------------------------

void __fastcall TForm1::BMP1Click(TObject *Sender)
{
     OpenImage(0);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::JPEG1Click(TObject *Sender)
{
     OpenImage(1);
}
//---------------------------------------------------------------------------
void TForm1::OpenImage(int type)
{
        if (type == 1) {
                OpenPictureDialog1->FilterIndex = 2;
                if (OpenPictureDialog1->Execute()) {
                        TJPEGImage *JImage= new TJPEGImage;
                        JImage->LoadFromFile(OpenPictureDialog1->FileName);
                        graylevel->Assign(JImage);
                        delete JImage;
                }
        }
        else {
                OpenPictureDialog1->FilterIndex = 4;
                if (OpenPictureDialog1->Execute())
                        graylevel->LoadFromFile(OpenPictureDialog1->FileName);
        }

        for(int x=0;x<graylevel->Width;x++)
        for(int y=0;y<graylevel->Height;y++){
                int r=GetRValue(graylevel->Canvas->Pixels[x][y]);
                int g=GetGValue(graylevel->Canvas->Pixels[x][y]);
                int b=GetBValue(graylevel->Canvas->Pixels[x][y]);
                int gray=0.299*r+0.587*g+0.114*b;
                graylevel->Canvas->Pixels[x][y]=(TColor)RGB(gray,gray,gray);
        }

        Image1->Picture->Bitmap=graylevel;
 //       Form1->Width=Image1->Left+Image1->Width+20;
 //       Form1->Left=(1024- Form1->Width)/2;

}
void __fastcall TForm1::N2Click(TObject *Sender)
{
        if(SavePictureDialog1 -> Execute())
                Image1->Picture->SaveToFile(SavePictureDialog1->FileName);
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Button1Click(TObject *Sender)
{
        memset(Histogram,0,sizeof(Histogram));
        max_value=0;
        /*Step 1*/
        for(int x=0;x<graylevel->Width;x++)
        for(int y=0;y<graylevel->Height;y++){
                int value=GetRValue(graylevel->Canvas->Pixels[x][y]);
                if(value > max_value) max_value=value;
                Histogram[value]++;
        }
        /*End Step 1*/

        /*Draw Histogram*/
        Series1->Clear();
        for (int i = 0; i <= 255; i++)
                Series1->Add( Histogram[i] , IntToStr(i) , clTeeColor );
        /*End Draw Histogram*/
//        PageControl1->ActivePageIndex=0;
        PageControl2->ActivePageIndex=0;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Button2Click(TObject *Sender)
{
        Graphics::TBitmap *temp=new Graphics::TBitmap();
        long new_H[256]={0};
        long total=graylevel->Height*graylevel->Width;
        memset(H_equalization,0,sizeof(H_equalization));
        /* Step 2 , 3 */
        for(int x=0;x<=255;x++){
                if(x>0)  Histogram[x]+=Histogram[x-1];
                H_equalization[x]=(long)(Histogram[x]/(double)total*max_value);
        }
        /* Step 4 */
        temp->Width=graylevel->Width;
        temp->Height=graylevel->Height;
        for(int x=0;x<graylevel->Width;x++)
        for(int y=0;y<graylevel->Height;y++){
                int color=H_equalization[GetRValue(graylevel->Canvas->Pixels[x][y])];
                temp->Canvas->Pixels[x][y]=(TColor)RGB(color,color,color);
        }
        /* End Step 4 */

        /* Draw Histogram Equalization */
        for(int x=0;x<graylevel->Width;x++)
        for(int y=0;y<graylevel->Height;y++){
                int value=GetRValue(temp->Canvas->Pixels[x][y]);
                new_H[value]++;
        }
        /*
        for(int x=0;x<=255;x++){
                AnsiString tt=IntToStr(x)+" "+IntToStr(Histogram[x])+" "+IntToStr(new_H[x])+" "+IntToStr(H_equalization[x]);
                Memo1->Lines->Append(tt);
        }

        num=255;
        for(int x=0;x<=255;x++)
                if(num<new_H[x]) num=new_H[x]+1;
        Image3->Height=num;
        for(int x=0;x<=255;x++)
        for(int y=0;y<=num;y++){
                int color= (y<num-new_H[x]) ? 255 : 0;
                Image3->Canvas->Pixels[x][y]=(TColor)RGB(color,color,color);
        }
         End Draw Histogram Equalization */
        Image4->Picture->Bitmap=temp;
 //       PageControl1->ActivePageIndex=1;
        PageControl2->ActivePageIndex=1;
        delete temp;

}
//---------------------------------------------------------------------------

