<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0041)http://www.csie.ntu.edu.tw/~ds/hw/ed.html -->
<!-- saved from url=(0063)http://www.ling.ohio-state.edu/~cbrew/795M/string-distance.html --><HTML><HEAD><TITLE>Calculating Edit Distance Between Sequences</TITLE>
<META http-equiv=Content-Type content="text/html; charset=big5">
<META content="MSHTML 6.00.2726.2500" name=GENERATOR></HEAD>
<BODY>
<H1>Edit Distance</H1>
<H2>Definition</H2>
<P>The smallest number of insertions, deletions, and substitutions required to 
change one string into another 
<P>
<H1>Calculating Edit Distance Between Sequences</H1>
<H2>Introduction</H2>
<P>This document describes a (simpler) algorithm closely related to the Viterbi 
decoding method for HMMs. The task is to calculate the "edit distance" between 
two sequences. This is defined as the cheapest way of using the elementary 
operations "insert","delete" and "substitute" to turn one sequence into the 
other. The algorithm below does this efficiently by filling up a square array of 
distances, starting from the bottom left and working to the top right. 
<P>We work with a square array of cells with dimensions <B>one bigger</B> than 
the strings to be compared. </P><PRE>    def sdist(string1,string2):
	delCost = 1.0
	insCost = 1.0
	substCost = 1.0
        m = len(string1)
        n = len(string2)
        d(0,0) = 0.0
</PRE>
<P>We set up some variables, then seed the recursion with the left hand bottom 
element. It would be easy to write another version in which the costs were 
different. If the substitution cost is greater than the sum of the other two 
costs it will always be better to do an insertion then a deletion, and no 
substitutions will occur in the minumum cost path. <PRE>	
	for i below m
	    d(i+1,0) = d(i,0) + delCost
        endfor
</PRE>We fill in the first row, adding entries with indices (1,0) through (m,0) <PRE>	for j below n
	    d(0,j+1) = d(0,j) + insCost
        endfor
</PRE>
<P>We fill in the first column, adding entries with indices (0,1) through (0,n) <PRE>	for i below m
	    for j in n    
		if string1(i) == string2(j)
		    subst = 0
		else
		    subst = substCost
                endif
		d(i+1,j+1) = min(d(i,j) + subst,
				 d(i+1,j)+ delCost,
				 d(i,j+1)+insCost)
           endfor
       endfor
</PRE>
<P>Once we have the edges of the array, we can work outwards, filling in the 
values which depend on these. We look at all three possible predecessors of each 
cell, taking the one which gives the lowest cost. This version says that there 
is no charge for matching a letter against itself, but that it costs one penalty 
point to match against anything else. It would be easy to vary this if we 
thought, for example, that it was less bad to confuse some letter pairs than to 
confuse others. <PRE>	return d(m,n)
</PRE>
<P>At the end, the total distance is in the cell at (m,n). This scheme can be 
adapted to compute the sequence of edit operations rather than just the number. 
<HR>

<ADDRESS><A href="mailto:cbrew@ling.ohio-state.edu">Chris Brew</A></ADDRESS><!-- Created: Mon Feb 21 16:09:56 EST 2000 --><!-- hhmts start -->Last 
modified: Mon Feb 28 12:37:57 EST 2000 <!-- hhmts end --></BODY></HTML>
